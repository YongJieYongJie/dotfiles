# Change prefix key to backtick (`)
unbind C-b
set-option -g prefix `
bind ` send-prefix

# Increase scrollback limit from default of 2,000 to 50,000
set-option -g history-limit 50000

# Integrate with system clipboard
bind P paste-buffer

# Use Vi keys to move around in copy-mode
set-window-option -g mode-keys vi

# For version <= 2.4 I think
# bind-key -t vi-copy 'v' begin-selection
# bind-key -t vi-copy 'y' copy-selection
# bind-key -t vi-copy 'r' rectangle-toggle

# bind -t vi-copy y copy-pipe "xclip -sel clip -i"

# For version > 2.4 I think
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection
bind-key -T copy-mode-vi r send-keys -X rectangle-toggle
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-no-clear "xclip -i -f -selection primary | xclip -i -selection clipboard"

# Enter copy-mode and immediately search for URL / source files
# Note: The regular expressions used are very scrappy; to be modified when they
# prove insufficient.
bind-key u copy-mode \; send-key -X search-backward '(http|https|file)://[^ ]*'
bind-key g copy-mode \; send-key -X search-backward '[^ ]*\.[a-zA-Z]{1,10}'

# Copy-mode keybindings to open seleciton using:
#   1. system generic file-opening command,
#   2. IntelliJ Idea, and
#   3. Neovide via neovim-remote
# respectively.
#
# Note: The line
#   selection=`echo $selection | sed -nE "s#^(file://)?(.*)#\2#p"` \
# is used to trim away the leading `file://` if it is present.
#
# Note 2: For Neovide via neovim-remote workflow, please follow these steps:
#   1. Install neovim-remote using `pip3 install neovim-remote`
#   2. Start a headless Neovim session using:
#          `nvim --headless --listen /tmp/nvimsocket`
#   3. Start Neovide and attach to the headless Neovim session using:
#          `neovide --multigrid --frame=none --server=/tmp/nvimsocket`
bind-key -T copy-mode-vi C-o send-key -X copy-pipe 'xargs open'
bind-key -T copy-mode-vi C-i send-key -X copy-pipe '\
  read selection; \
  selection=`echo $selection | sed -nE "s#^(file://)?(.*)#\2#p"` \
  cwd=$(tmux display -p "#{pane_current_path}"); \
  idea $(cd $cwd && realpath $selection)'
bind-key -T copy-mode-vi C-n send-key -X copy-pipe '\
  read selection; \
  selection=`echo $selection | sed -nE "s#^(file://)?(.*)#\2#p"` \
  cwd=$(tmux display -p "#{pane_current_path}"); \
  nvr --remote-tab $(cd $cwd && realpath $selection); \
  xdotool search --name neovide | xargs xdotool windowactivate; \
  osascript -e "activate application \"Neovide\""'

# Set base index for windows and panes to 1
set-option -g base-index 1
set-window-option -g pane-base-index 1

# Set new panes to open in current directory
# Copied from https://w.amazon.com/bin/view/Users/chnyon/Quip/HealthMonitoringdesign/
bind c new-window -c "#{pane_current_path}"
bind '"' split-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"

# Rebind prefix+; to select the previous pane, but also maintaining the zoomed state.
# Adapted from https://stackoverflow.com/a/52458841
bind-key ";" if-shell -F "#{window_zoomed_flag}" 'select-pane -t :.!; resize-pane -Z' 'select-pane -t :.!'

# Toggle status bar ("h" for "hide")
bind h set-option -g status

# Reduce the delay after an escape key, necessary for working with Vim / Neovim
set-option -sg escape-time 20

# Allow mouse support
set-option -g mouse on
# set-option -g mode-mouse on
# set-option -g mouse-resize-pane on
# set-option -g mouse-select-pane on
# set-option -g mouse-select-window on

# Clear status bar of distracting text
set-option -g status-left ''
set-option -g status-right '\
 ðŸ”¥ #(uptime | sed -nE "s/.*load average: ([^,]*).*/\1/p")\
 | ðŸ§  #(free -hw | grep Mem | tr -s " " | cut -d" " -f4)\
 |ðŸ”‹ #(upower --show-info /org/freedesktop/UPower/devices/battery_BAT0 | sed -nE "s/.*percentage: *([0-9]+%).*/\1/p")'

# Use emacs keymap when entering command interactively
set-option -g status-key emacs

set-window-option -g window-status-current-format '#[underscore,bold]#I #W#F'
set-window-option -g window-status-format '#I #W'

# Make the status bar background "transparent" (i.e., white on black)
set-window-option -g status-fg white
set-window-option -g status-bg black

# Move word-based movements in copy-mode using `b` and `f` stops at meaningful
# characters
set-window-option -g word-separators ' /\\@"=-()[]{}.,'"'"

# Fixes 24-bit color, as described here:
# https://github.com/dandavison/delta#24-bit-color-truecolor
#
# Updated based on this StackOverflow answer which fixes neovim color too:
# https://askubuntu.com/a/1331926/941632
set-option -ga terminal-overrides ",xterm-256color:Tc"
# set -g default-terminal screen-256color # You can use tmux-256color, however it's not installed by default on macOS
set -g default-terminal tmux-256color
# set -ga terminal-overrides ",alacritty:RGB" # if your echo $TERM outside of
# alacritty isn't alacritty, place this $TERM thing instead(it should be
# xterm-256color otherwise)

#region Below is adopted from https://gist.github.com/spicycode/1229612

# Use alt + arrow keys to switch panes
bind -n M-Left  select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up    select-pane -U
bind -n M-Down  select-pane -D

# Use shift + arrow key to switch windows
bind -n S-Left  previous-window
bind -n S-Right next-window
# <prefix>-0 to switch to first window
bind '0' run-shell 'tmux list-windows | head -n 1 | cut -d':' -f1 | xargs -I{} tmux select-window -t:{}'
# <prefix>-9 to switch to first window
bind '9' run-shell 'tmux list-windows | tail -n 1 | cut -d':' -f1 | xargs -I{} tmux select-window -t:{}'

# Use prefix + r to reload tmux config
bind r source-file ~/.tmux.conf
bind a set-window-option synchronize-panes

#endregion
